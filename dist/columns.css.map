{"version":3,"sourceRoot":"","sources":["file:///Users/patricklake/Dev/personal/css_utilities/src/utils-exports/_columns.scss","file:///Users/patricklake/Dev/personal/css_utilities/src/mixins/index.scss","file:///Users/patricklake/Dev/personal/css_utilities/src/maps/index.scss"],"names":[],"mappings":"AAQA,KACE,uBACA,0BAEA,aACA,eACA,oCACA,8BACA,sBAWA,OACE,iEADF,OACE,kEADF,OACE,+CADF,OACE,kEADF,OACE,kEADF,OACE,8CADF,OACE,kEADF,OACE,kEADF,OACE,+CADF,QACE,kEADF,QACE,kEADF,QACE,8CCtBF,yBDqCI,UACE,6ECtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,2DCtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,0DCtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,2DCtCN,yBDqCI,WACE,8ECtCN,yBDqCI,WACE,8ECtCN,yBDqCI,WACE,0DCtCN,yBDqCI,UACE,6ECtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,2DCtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,0DCtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,2DCtCN,yBDqCI,WACE,8ECtCN,yBDqCI,WACE,8ECtCN,yBDqCI,WACE,0DCtCN,yBDqCI,UACE,6ECtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,2DCtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,0DCtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,2DCtCN,yBDqCI,WACE,8ECtCN,yBDqCI,WACE,8ECtCN,yBDqCI,WACE,0DCtCN,yBDqCI,UACE,6ECtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,2DCtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,0DCtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,8ECtCN,yBDqCI,UACE,2DCtCN,yBDqCI,WACE,8ECtCN,yBDqCI,WACE,8ECtCN,yBDqCI,WACE,0DCtCN,2BDqCI,WACE,6ECtCN,2BDqCI,WACE,8ECtCN,2BDqCI,WACE,2DCtCN,2BDqCI,WACE,8ECtCN,2BDqCI,WACE,8ECtCN,2BDqCI,WAC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","sourcesContent":["\n@import '../base-vars';\n@import '../base-maps';\n@import '../mixins/';\n/* @import '../reset/'; */\n\n$col-chunk: calc(100 / $number-of-columns);\n\n.row {\n  --col-gutter-row: #{$space-none};\n  --col-gutter-column: #{$space-none};\n\n  display: flex;\n  flex-wrap: wrap;\n  column-gap: var(--col-gutter-column);\n  row-gap: var(--col-gutter-row);\n  justify-content: start;\n}\n\n@for $i from 1 through $number-of-columns {\n  $col-width: $i * $col-chunk;\n  // Multiplier to use with gutter size\n  $gap-offset: calc((100 - $col-width) / 100);\n  // convert amount to percentage\n  $col-width-as-percentage: calc($col-width * 1%);\n\n  // Column width\n  .col-#{$i} {\n    width: calc(\n      $col-width-as-percentage - (var(--col-gutter-column) * $gap-offset)\n    );\n  }\n}\n\n// Column width responsive\n@each $bp, $px in $breakpoints {\n  @for $i from 1 through $number-of-columns {\n    $col-width: $i * $col-chunk;\n    // Multiplier to use with gutter size\n    $gap-offset: calc((100 - $col-width) / 100);\n    // convert amount to percentage\n    $col-width-as-percentage: calc($col-width * 1%);\n    @include respond-to(#{$px}) {\n      .col-#{$bp}-#{$i} {\n        width: calc(\n          $col-width-as-percentage - (var(--col-gutter-column) * $gap-offset)\n        ) !important;\n      }\n    }\n  }\n}\n\n@each $key, $val in $spacers {\n  .g-#{$key} {\n    --col-gutter-row: #{$val};\n    --col-gutter-column: #{$val};\n  }\n\n  @each $bp, $px in $breakpoints {\n    @include respond-to(#{$px}) {\n      .g-#{$bp}-#{$key} {\n        --col-gutter-row: #{$val} !important;\n        --col-gutter-column: #{$val} !important;\n      }\n    }\n  }\n}\n\n@include class-with-responsive-key-and-val(\n  $spacers,\n  g-col,\n  --col-gutter-column\n);\n\n@include class-with-responsive-key-and-val($spacers, g-row, --col-gutter-row);\n","@use 'sass:map';\n@use 'sass:meta';\n\n@mixin respond-to($breakpoint) {\n  $dir: if($is-mobile-first, min-width, max-width);\n\n  @media (#{$dir}: $breakpoint) {\n    @content;\n  }\n}\n\n@mixin xl-size() {\n  @include respond-to($screen-xl-min) {\n    @content;\n  }\n}\n\n@mixin lg-size() {\n  @include respond-to($screen-lg-min) {\n    @content;\n  }\n}\n\n@mixin md-size() {\n  @include respond-to($screen-md-min) {\n    @content;\n  }\n}\n\n@mixin sm-size() {\n  @include respond-to($screen-sm-min) {\n    @content;\n  }\n}\n\n@mixin xs-size() {\n  @include respond-to($screen-xs-min) {\n    @content;\n  }\n}\n\n@mixin hover {\n  @media (hover: hover) {\n    @content;\n  }\n}\n\n@mixin flex-center {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n//  * Generate a responsive css variable\n//  *\n//  * @param {text} $var-to-update: the css variable, --css-var\n//  * @param {SASS Map} $map: must be a sass map containing keys of sm, md, lg, xl\n//  * @param {any} $starting-val: optional, the default value, will set value for xs devices\n//  */\n@mixin make-responsive-var($var-to-update, $map, $starting-val: null) {\n  @if ($starting-val) {\n    #{$var-to-update}: $starting-val;\n  } @else if (map-has-key($map, 'md')) {\n    $val: map.get($map, 'md');\n    #{$var-to-update}: #{$val};\n  } @else if (map-has-key($map, 'lg')) {\n    $val: map.get($map, 'lg');\n    #{$var-to-update}: #{$val};\n  }\n\n  $break-points-in-map: map.keys($map);\n  // this requires the map to container\n  // keys equal to the either (sm, md, lg ,xl or, xxl)\n\n  @each $key /* = sm, md, lg, xl, xxl */ in $break-points-in-map {\n    $bp: map.get($breakpoints, $key); // Get bp by key\n    $val: map.get($map, $key);\n\n    @include respond-to($bp) {\n      #{$var-to-update}: #{$val};\n    }\n  }\n}\n\n//  * Generate a css class with responsive classes\n//  *\n//  * @param {SASS Map} $map: must be a sass map containing only values\n//  * @param {text} $class: the name of the class to output\n//  * @param {text} $property: the css property to effect\n//  */\n@mixin class-with-responsive-val-only($map, $class, $property) {\n  @each $val in $map {\n    .#{$class}-#{$val} {\n      #{$property}: $val;\n    }\n    @each $bp, $px in $breakpoints {\n      @include respond-to(#{$px}) {\n        .#{$class}-#{$bp}-#{$val} {\n          #{$property}: $val !important;\n        }\n      }\n    }\n  }\n}\n\n//  * Generate a css class with responsive classes using key and value from map\n//  *\n//  * @param {SASS Map} $map: must be a sass map containing key value pairs\n//  * @param {text} $class: the css property to effect\n//  * @param {text} $property: the css property to effect\n//  * @param {boolean} $calc-value: toggle for using calcualted value, must be paired with `$var-name`\n//  * @param {CSS var} $var-name: A css var to use for calculating the output value\n//  */\n@mixin class-with-responsive-key-and-val(\n  $map,\n  $class,\n  $property,\n  $calc-value: null,\n  $var-name: null\n) {\n  @each $key, $val in $map {\n    .#{$class}-#{$key} {\n      @if $calc-value and $var-name {\n        @if meta.type-of($property) == 'list' {\n          @each $key in $property {\n            #{$key}: calc($val - var($var-name, 0px));\n          }\n        } @else {\n          #{$property}: calc($val - var($var-name, 0px));\n        }\n      } @else {\n        @if meta.type-of($property) == 'list' {\n          @each $key in $property {\n            #{$key}: $val;\n          }\n        } @else {\n          #{$property}: $val;\n        }\n      }\n    }\n\n    @each $bp, $px in $breakpoints {\n      @include respond-to(#{$px}) {\n        .#{$class}-#{$bp}-#{$key} {\n          @if $calc-value and $var-name {\n            @if meta.type-of($property) == 'list' {\n              @each $key in $property {\n                #{$key}: calc($val - var($var-name, 0px)) !important;\n              }\n            } @else {\n              #{$property}: calc($val - var($var-name, 0px)) !important;\n            }\n          } @else {\n            @if meta.type-of($property) == 'list' {\n              @each $key in $property {\n                #{$key}: $val !important;\n              }\n            } @else {\n              #{$property}: $val !important;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// * Generate eiather a single transition property, or a list of transitions\n//  *\n//  * @param {SASS list | string} the property to transition\n//  * @param {number?} Transition time\n//  * @param {ease?} Transition Ease\n@mixin transition($target, $time: 300, $ease: ease-in-out) {\n  $transition: ();\n\n  // Check type\n  @if meta.type-of($target) == 'list' {\n    @each $val in $target {\n      // set up transition properties\n      $prop: $val #{$time}ms $ease;\n      // Create comma seperated list of transition properties\n      $transition: append($transition, $prop, comma);\n    }\n  } @else {\n    $transition: $target #{$time}ms $ease;\n  }\n\n  transition: $transition;\n}\n\n@mixin border-rounded($radius: $border-radius) {\n  border-radius: $radius;\n  overflow: hidden;\n}\n\n// @mixin hui_tooltip($content: attr(data-tooltip), $direction: top) {\n//   position: relative;\n//   &:before,\n//   &:after {\n//     display: none;\n//     z-index: 98;\n//   }\n//   &:hover {\n//     &:after {\n//       // for text bubble\n//       content: $content;\n//       display: block;\n//       position: absolute;\n//       height: 12px; // (makes total height including padding 22px)\n//       padding: 6px;\n//       font-size: 12px;\n//       white-space: nowrap;\n//       color: #fff;\n//       @include text-shadow(1px 1px #000);\n//       background-color: #222;\n//     }\n//     @if ($direction == 'top') {\n//       &:before {\n//         @include triangle(down, 6px, #222);\n//         top: -6px;\n//         margin-top: 0;\n//         left: 47%;\n//       }\n//       &:after {\n//         top: -28px;\n//         left: 47%;\n//         margin-left: -20px;\n//       }\n//     } @else if ($direction == 'bottom') {\n//       &:before {\n//         @include triangle(up, 6px, #222);\n//         top: auto;\n//         margin-top: 0;\n//         bottom: -6px;\n//         left: 47%;\n//       }\n//       &:after {\n//         bottom: -28px;\n//         left: 47%;\n//         margin-left: -20px;\n//       }\n//     }\n//   }\n// }\n","@use 'sass:map';\n\n/**************************************************/\n/* Global Spacers */\n/**************************************************/\n\n$space-none: 0rem;\n$space-xs: $base-spacing * 0.25;\n$space-sm: $base-spacing * 0.5;\n$space-md: $base-spacing;\n$space-lg: $base-spacing * 2;\n$space-xl: $base-spacing * 3;\n$space-xxl: $base-spacing * 4;\n$space-xxxl: $base-spacing * 8;\n\n$spacers: (\n  none: $space-none,\n  xs: $space-xs,\n  sm: $space-sm,\n  md: $space-md,\n  lg: $space-lg,\n  xl: $space-xl,\n  xxl: $space-xxl,\n  xxxl: $space-xxxl,\n  auto: auto,\n);\n\n$breakpoints: (\n  sm: $screen-sm-min,\n  md: $screen-md-min,\n  lg: $screen-lg-min,\n  xl: $screen-xl-min,\n  xxl: $screen-xxl-min,\n);\n\n// **************************************************\n// ******************** Typography ******************\n// **************************************************\n\n$font-xs-sizes: (\n  md: rem(14),\n  lg: rem($base-font-size),\n);\n\n$font-sm-sizes: (\n  sm: rem(14),\n  md: rem($base-font-size),\n  xl: if($font-increase-on-xl, rem(18), rem($base-font-size)),\n);\n\n$font-base-sizes: (\n  sm: rem($base-font-size),\n  md: rem(18),\n  xl: if($font-increase-on-xl, rem(20), rem(18)),\n);\n\n$font-lg-sizes: (\n  sm: rem(18),\n  md: rem(20),\n  xl: if($font-increase-on-xl, rem(22), rem(20)),\n);\n\n$font-weights: (100, 200, 300, 400, 500, 600, 700, 800, 900);\n\n// Determian which breakpoints update the Header sizes\n$header-font-responsive-sizes: (sm, md, lg, xl);\n\n$headers: ('6', '5', '4', '3', '2', '1');\n\n// **************************************************\n// ************* Additional Colors ******************\n// **************************************************\n$bg-colors: (\n  primary: $bg-primary,\n  secondary: $bg-secondary,\n  accent: $bg-accent,\n  tertiary: $bg-tertiary,\n  dark: $bg-dark,\n  light: #ededed,\n);\n\n$target-colors: (\n  black: $black,\n  white: $white,\n  red: $red,\n  orange: $orange,\n  yellow: $yellow,\n  green: $green,\n  blue: $blue,\n  cyan: $cyan,\n  indigo: $indigo,\n  violet: $violet,\n  purple: $purple,\n  grey: $grey,\n);\n\n// Combine BG color map with the target color map\n$target-colors: map.merge($bg-colors, $target-colors);\n\n$tones: 10, 20, 30, 40, 50, 60, 70, 80;\n\n// **************************************************\n// ******************* Displays *********************\n// **************************************************\n\n// todo Add grid\n// Only Adding currently used displays for this project\n$displays: (block, inline, inline-block, flex, inline-flex, none);\n\n// **************************************************\n// *************** Containers ***********************\n// **************************************************\n\n$container-max-widths: (\n  container: (\n    value: calc($container-base-size - ($container-width-decrease * 4)),\n    include: (\n      sm,\n      md,\n      lg,\n      xl,\n      xxl,\n    ),\n  ),\n  sm: (\n    value: calc($container-base-size - ($container-width-decrease * 4)),\n    include: (\n      sm,\n      md,\n      lg,\n      xl,\n      xxl,\n    ),\n  ),\n  md: (\n    value: calc($container-base-size - ($container-width-decrease * 3)),\n    include: (\n      md,\n      lg,\n      xl,\n      xxl,\n    ),\n  ),\n  lg: (\n    value: calc($container-base-size - ($container-width-decrease * 2)),\n    include: (\n      lg,\n      xl,\n      xxl,\n    ),\n  ),\n  xl: (\n    value: calc($container-base-size - ($container-width-decrease * 1)),\n    include: (\n      xl,\n      xxl,\n    ),\n  ),\n  xxl: (\n    value: calc($container-base-size - ($container-width-decrease * 0)),\n    include: (\n      xxl,\n    ),\n  ),\n);\n\n// **************************************************\n// ******************* Images *********************\n// **************************************************\n\n$aspect-ratios: (\n  'auto': 'auto',\n  '1x1': '1 / 1',\n  '4x3': '4 / 3',\n  '3x2': '3 / 2',\n  '16x9': '16 / 9',\n  '3x4': '3 / 4',\n);\n\n$object-positions: (\n  'tl': 0% 0%,\n  'tr': 100% 0%,\n  'bl': 0% 100%,\n  'br': 100% 100%,\n  'center': 50% 50%,\n);\n\n/// *************************************************\n// *************** Margin & Padding *****************\n// **************************************************\n\n$types: (\n  p: 'padding',\n  m: 'margin',\n  mn: 'margin',\n);\n\n$directions: (\n  t: 'top',\n  r: 'right',\n  b: 'bottom',\n  l: 'left',\n);\n\n$combinationDirections: (\n  x: (\n    'left',\n    'right',\n  ),\n  y: (\n    'top',\n    'bottom',\n  ),\n);\n\n$allDirections: ('left', 'right', 'top', 'bottom');\n\n// **************************************************\n// **************** Opacity *************************\n// **************************************************\n\n$opacities: (\n  0: 0,\n  25: 0.25,\n  33: 0.33,\n  50: 0.5,\n  66: 0.66,\n  75: 0.75,\n  100: 1,\n);\n\n// **************************************************\n// **************** Overflow ************************\n// **************************************************\n\n$overflow: (auto, hidden, visible, scroll);\n\n// **************************************************\n// ***************** Text Alignment *****************\n// **************************************************\n\n$text-alignment: (start, end, center, right, left);\n\n$vertical-alignment: (baseline top middle bottom text-bottom text-top);\n\n// **************************************************\n// ************* Width & Height *********************\n// **************************************************\n\n$width--height-percentages: (\n  25: 25%,\n  33: 33%,\n  50: 50%,\n  66: 66%,\n  75: 75%,\n  100: 100%,\n);\n\n$height-vh: (\n  25: 25vh,\n  33: 33vh,\n  50: 50vh,\n  66: 66vh,\n  75: 75vh,\n  100: 100vh,\n);\n\n$width-vw: (\n  25: 25vw,\n  33: 33vw,\n  50: 50vw,\n  66: 66vw,\n  75: 75vw,\n  100: 100vw,\n);\n\n// **************************************************\n// ***************** Z-indicies *********************\n// **************************************************\n$z-indecies: (\n  n1: -1,\n  0: 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  10: 10,\n  100: 100,\n  200: 200,\n  300: 300,\n  400: 400,\n  500: 500,\n  600: 600,\n  700: 700,\n  800: 800,\n  900: 900,\n  1000: 1000,\n);\n\n$above-everyhting: 999999;\n\n// **************************************************\n// ***************** Positioning ********************\n// **************************************************\n\n$positions: (relative, absolute, fixed, static, sticky, unset);\n\n$position-placements: (top, bottom, left, right);\n\n$position-values: (\n  0: 0,\n  25: 25%,\n  33: 33%,\n  50: 50%,\n  66: 66%,\n  75: 75%,\n  100: 100%,\n  n25: -25%,\n  n33: -33%,\n  n50: -50%,\n  n66: -66%,\n  n75: -75%,\n  n100: -100%,\n);\n\n// **************************************************\n// ***************** Borders ************************\n// **************************************************\n\n$border-sides: (top, right, bottom, left, all);\n\n$border-widths: (\n  1: rem(1),\n  2: rem(2),\n  3: rem(3),\n  4: rem(4),\n  5: rem(5),\n  0: 0,\n);\n\n$border-radius-sides: (\n  tl: 'top-left',\n  tr: 'top-right',\n  bl: 'bottom-left',\n  br: 'bottom-right',\n  all: 'all',\n);\n\n$border-rounded-edges: (\n  rounded: $border-radius,\n  pill: $border-radius-pill,\n  circle: $border-radius-circle,\n);\n\n$border-colors: ();\n$border-colors: map.merge($border-colors, $target-colors);\n\n// **************************************************\n// ******************** Box Shadows *****************\n// **************************************************\n\n$shadows: (\n  '0': (\n    'spread': 0 0 0,\n    'opacity': 0,\n  ),\n  '1': (\n    'spread': $shadow-1,\n    'opacity': 0.15,\n  ),\n  '2': (\n    'spread': $shadow-2,\n    'opacity': 0.15,\n  ),\n  '3': (\n    'spread': $shadow-3,\n    'opacity': 0.2,\n  ),\n  '4': (\n    'spread': $shadow-4,\n    'opacity': 0.25,\n  ),\n  '5': (\n    'spread': $shadow-5,\n    'opacity': 0.3,\n  ),\n);\n\n// **************************************************\n// ******************** Flexbox *********************\n// **************************************************\n\n$flex-basis: (\n  25: 25%,\n  33: 33%,\n  50: 50%,\n  66: 66%,\n  75: 75%,\n  100: 100%,\n);\n\n$placements: (\n  center: center,\n  start: flex-start,\n  end: flex-end,\n  flex-start: flex-start,\n  flex-end: flex-end,\n  between: space-between,\n  around: space-around,\n  even: space-evenly,\n  stretch: stretch,\n);\n\n$align-items: (\n  center: center,\n  start: flex-start,\n  end: flex-end,\n  flex-start: flex-start,\n  flex-end: flex-end,\n  baseline: baseline,\n  stretch: stretch,\n);\n\n$flex-direction: (\n  row: row,\n  row-reverse: row-reverse,\n  col: column,\n  col-reverse: column-reverse,\n);\n\n$flex-wrap: (\n  wrap: wrap,\n  no-wrap: nowrap,\n  wrap-reverse: wrap-reverse,\n);\n\n$order: (\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n);\n\n// The first key equals the CSS prop to be targeted\n// The nested key will set the base class name\n// EX: .flex-row {flex-direction: row}\n$flex: (\n  justify-content: (\n    justify-content: $placements,\n  ),\n  align-content: (\n    align-content: $placements,\n  ),\n  align-items: (\n    align-items: $align-items,\n  ),\n  align-self: (\n    align-self: $align-items,\n  ),\n  flex-direction: (\n    flex: $flex-direction,\n  ),\n  flex-wrap: (\n    flex: $flex-wrap,\n  ),\n  order: (\n    order: $order,\n  ),\n  gap: (\n    gap: $spacers,\n  ),\n  column-gap: (\n    gap-col: $spacers,\n  ),\n  row-gap: (\n    gap-row: $spacers,\n  ),\n  flex-basis: (\n    flex-basis: $flex-basis,\n  ),\n);\n"]}