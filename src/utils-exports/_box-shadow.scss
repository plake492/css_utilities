@use 'sass:map';

@import '../base-vars';
@import '../base-maps';

@import '../mixins/';
@import '../reset/';
/* @import '../base/' */

// Extract RGB colors for color variable
$shadow-value: red($shadow-color) green($shadow-color) blue($shadow-color);

// Set color variable
:root {
  --shadow-color: #{$shadow-value};
}

.box-shadow {
  box-shadow: $box-shadow;
}

.box-shadow-none {
  box-shadow: none;
}

@each $bp, $px in $breakpoints {
  @include respond-to($px) {
    .box-shadow-#{$bp} {
      box-shadow: $box-shadow !important;
    }

    .box-shadow-#{$bp}-none {
      box-shadow: none !important;
    }
  }
}

$previous-shadow: false;

@each $key, $val in $shadows {
  // Get the spread value
  $spread: map.get($shadows, $key, 'spread');
  // Get the opacity value
  $opacity: map.get($shadows, $key, 'opacity');

  // Construct the shadow value
  // !The '/' is reguired for this to work. A comma does not work
  $shadow: $spread rgba(var(--shadow-color) / $opacity);
  $shadow-inset: inset #{$shadow};

  // Place holder for accumulative box shadow
  $box-shadow: ();
  $box-shadow-inset: $shadow-inset;

  // The first shadow will be a single box shadow
  // Every one after will recieve the previous shadow and it's own
  @if ($previous-shadow and $previous-shadow != none) {
    $box-shadow: #{$shadow}, #{$previous-shadow};
  } @else {
    $box-shadow: $shadow;
  }
  // Over-ride this value for the next loop
  $previous-shadow: $shadow;

  .shadow-#{$key} {
    box-shadow: $box-shadow;
  }
  .shadow-inset-#{$key} {
    box-shadow: $box-shadow-inset;
  }
}

@each $key, $var in $target-colors {
  .shadow-#{'' + $key} {
    $shadow-value: red($var) green($var) blue($var);
    --shadow-color: #{$shadow-value};
  }
}
