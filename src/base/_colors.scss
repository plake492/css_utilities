@mixin generate-color-var($key, $value) {
  --#{$key}: #{$value};

  @each $tone in $tones {
    --#{$key}-#{$tone}: #{get-color-scale-value($value, $tone)};
  }
}

@mixin bg-classes() {
  background-color: var(--color);
  color: var(--text-color);
  @include transition((color, background), 200);
}

// ************************************************* //
// ************ Generate Color Bg Map  ************* //

// ************ Generate Root color vars ************ //
/* Set default root colors*/
:root {
  --color: #{$bg-primary};
  --text-color: #{get-contrasted-text($bg-primary)};

  @each $key, $value in $target-colors {
    --#{'' + $key}: #{$value};

    // * Add tones as classes * //
    @each $tone in $tones {
      $bg-color-tone: get-color-scale-value($value, $tone);
      $text-color-tone: get-contrasted-text($bg-color-tone);

      --#{'' + $key}-#{$tone}: #{$bg-color-tone};
    }
  }
}

@each $key, $value in $target-colors {
  $text-color: get-contrasted-text($value);

  // Update Root colors, setting colors in child elements
  .bg-#{'' + $key} {
    --color: #{$value};
    --text-color: #{$text-color};
    @include bg-classes();
  }

  .color-#{'' + $key} {
    --text-color: #{$value};
    color: var(--text-color);
  }

  // * Add tones as classes * //
  @each $tone in $tones {
    $bg-color-tone: get-color-scale-value($value, $tone);
    $text-color-tone: get-contrasted-text($bg-color-tone);

    // Update Root colors, setting colors in child elements
    .bg-#{'' + $key}-#{$tone} {
      --color: #{$bg-color-tone};
      --text-color: #{$text-color-tone};
      @include bg-classes();
    }
    @if $color-classes-with-tones {
      // Include color tone's
      .color-#{'' + $key}-#{$tone} {
        --text-color: #{$bg-color-tone};
        color: var(--text-color);
      }
    }
  }
}
